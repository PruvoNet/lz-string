{"version":3,"file":"index.cjs","sources":["../src/_compress.ts","../src/_decompress.ts","../src/base64/keyStrBase64.ts","../src/base64/compressToBase64.ts","../src/getBaseValue.ts","../src/base64/decompressFromBase64.ts","../src/raw/compress.ts","../src/custom/compressToCustom.ts","../src/raw/decompress.ts","../src/custom/decompressFromCustom.ts","../src/encodedURIComponent/keyStrUriSafe.ts","../src/encodedURIComponent/compressToEncodedURIComponent.ts","../src/encodedURIComponent/decompressFromEncodedURIComponent.ts","../src/Uint8Array/compressToUint8Array.ts","../src/Uint8Array/utils.ts","../src/Uint8Array/decompressFromUint8Array.ts","../src/node.ts","../src/UTF16/compressToUTF16.ts","../src/UTF16/decompressFromUTF16.ts","../src/index.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2013 Pieroxy <pieroxy@pieroxy.net>\n *\n * SPDX-License-Identifier: MIT\n */\n\nexport type Dictionary = Record<string, number>;\nexport type PendingDictionary = Record<string, true>;\n\nexport function _compress(uncompressed: null, bitsPerChar: number, getCharFromInt: (a: number) => string): \"\";\nexport function _compress(uncompressed: string, bitsPerChar: number, getCharFromInt: (a: number) => string): string;\nexport function _compress(\n    uncompressed: string | null,\n    bitsPerChar: number,\n    getCharFromInt: (a: number) => string,\n): string {\n    if (uncompressed == null) return \"\";\n\n    let i: number;\n    let value: number;\n    const context_dictionary: Dictionary = {};\n    const context_dictionaryToCreate: PendingDictionary = {};\n    let context_c: string = \"\";\n    let context_wc: string = \"\";\n    let context_w: string = \"\";\n    let context_enlargeIn: number = 2; // Compensate for the first entry which should not count\n    let context_dictSize: number = 3;\n    let context_numBits: number = 2;\n    const context_data: string[] = [];\n    let context_data_val: number = 0;\n    let context_data_position: number = 0;\n    let ii: number;\n\n    for (ii = 0; ii < uncompressed.length; ii += 1) {\n        context_c = uncompressed.charAt(ii);\n        if (!Object.prototype.hasOwnProperty.call(context_dictionary, context_c)) {\n            context_dictionary[context_c] = context_dictSize++;\n            context_dictionaryToCreate[context_c] = true;\n        }\n        context_wc = context_w + context_c;\n        if (Object.prototype.hasOwnProperty.call(context_dictionary, context_wc)) {\n            context_w = context_wc;\n        } else {\n            if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate, context_w)) {\n                if (context_w.charCodeAt(0) < 256) {\n                    for (i = 0; i < context_numBits; i++) {\n                        context_data_val = context_data_val << 1;\n                        if (context_data_position == bitsPerChar - 1) {\n                            context_data_position = 0;\n                            context_data.push(getCharFromInt(context_data_val));\n                            context_data_val = 0;\n                        } else {\n                            context_data_position++;\n                        }\n                    }\n                    value = context_w.charCodeAt(0);\n                    for (i = 0; i < 8; i++) {\n                        context_data_val = (context_data_val << 1) | (value & 1);\n                        if (context_data_position == bitsPerChar - 1) {\n                            context_data_position = 0;\n                            context_data.push(getCharFromInt(context_data_val));\n                            context_data_val = 0;\n                        } else {\n                            context_data_position++;\n                        }\n                        value = value >> 1;\n                    }\n                } else {\n                    value = 1;\n                    for (i = 0; i < context_numBits; i++) {\n                        context_data_val = (context_data_val << 1) | value;\n                        if (context_data_position == bitsPerChar - 1) {\n                            context_data_position = 0;\n                            context_data.push(getCharFromInt(context_data_val));\n                            context_data_val = 0;\n                        } else {\n                            context_data_position++;\n                        }\n                        value = 0;\n                    }\n                    value = context_w.charCodeAt(0);\n                    for (i = 0; i < 16; i++) {\n                        context_data_val = (context_data_val << 1) | (value & 1);\n                        if (context_data_position == bitsPerChar - 1) {\n                            context_data_position = 0;\n                            context_data.push(getCharFromInt(context_data_val));\n                            context_data_val = 0;\n                        } else {\n                            context_data_position++;\n                        }\n                        value = value >> 1;\n                    }\n                }\n                context_enlargeIn--;\n                if (context_enlargeIn == 0) {\n                    context_enlargeIn = Math.pow(2, context_numBits);\n                    context_numBits++;\n                }\n                delete context_dictionaryToCreate[context_w];\n            } else {\n                value = context_dictionary[context_w];\n                for (i = 0; i < context_numBits; i++) {\n                    context_data_val = (context_data_val << 1) | (value & 1);\n                    if (context_data_position == bitsPerChar - 1) {\n                        context_data_position = 0;\n                        context_data.push(getCharFromInt(context_data_val));\n                        context_data_val = 0;\n                    } else {\n                        context_data_position++;\n                    }\n                    value = value >> 1;\n                }\n            }\n            context_enlargeIn--;\n            if (context_enlargeIn == 0) {\n                context_enlargeIn = Math.pow(2, context_numBits);\n                context_numBits++;\n            }\n            // Add wc to the dictionary.\n            context_dictionary[context_wc] = context_dictSize++;\n            context_w = String(context_c);\n        }\n    }\n    // Output the code for w.\n    if (context_w !== \"\") {\n        if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate, context_w)) {\n            if (context_w.charCodeAt(0) < 256) {\n                for (i = 0; i < context_numBits; i++) {\n                    context_data_val = context_data_val << 1;\n                    if (context_data_position == bitsPerChar - 1) {\n                        context_data_position = 0;\n                        context_data.push(getCharFromInt(context_data_val));\n                        context_data_val = 0;\n                    } else {\n                        context_data_position++;\n                    }\n                }\n                value = context_w.charCodeAt(0);\n                for (i = 0; i < 8; i++) {\n                    context_data_val = (context_data_val << 1) | (value & 1);\n                    if (context_data_position == bitsPerChar - 1) {\n                        context_data_position = 0;\n                        context_data.push(getCharFromInt(context_data_val));\n                        context_data_val = 0;\n                    } else {\n                        context_data_position++;\n                    }\n                    value = value >> 1;\n                }\n            } else {\n                value = 1;\n                for (i = 0; i < context_numBits; i++) {\n                    context_data_val = (context_data_val << 1) | value;\n                    if (context_data_position == bitsPerChar - 1) {\n                        context_data_position = 0;\n                        context_data.push(getCharFromInt(context_data_val));\n                        context_data_val = 0;\n                    } else {\n                        context_data_position++;\n                    }\n                    value = 0;\n                }\n                value = context_w.charCodeAt(0);\n                for (i = 0; i < 16; i++) {\n                    context_data_val = (context_data_val << 1) | (value & 1);\n                    if (context_data_position == bitsPerChar - 1) {\n                        context_data_position = 0;\n                        context_data.push(getCharFromInt(context_data_val));\n                        context_data_val = 0;\n                    } else {\n                        context_data_position++;\n                    }\n                    value = value >> 1;\n                }\n            }\n            context_enlargeIn--;\n            if (context_enlargeIn == 0) {\n                context_enlargeIn = Math.pow(2, context_numBits);\n                context_numBits++;\n            }\n            delete context_dictionaryToCreate[context_w];\n        } else {\n            value = context_dictionary[context_w];\n            for (i = 0; i < context_numBits; i++) {\n                context_data_val = (context_data_val << 1) | (value & 1);\n                if (context_data_position == bitsPerChar - 1) {\n                    context_data_position = 0;\n                    context_data.push(getCharFromInt(context_data_val));\n                    context_data_val = 0;\n                } else {\n                    context_data_position++;\n                }\n                value = value >> 1;\n            }\n        }\n        context_enlargeIn--;\n        if (context_enlargeIn == 0) {\n            context_enlargeIn = Math.pow(2, context_numBits);\n            context_numBits++;\n        }\n    }\n    // Mark the end of the stream\n    value = 2;\n    for (i = 0; i < context_numBits; i++) {\n        context_data_val = (context_data_val << 1) | (value & 1);\n        if (context_data_position == bitsPerChar - 1) {\n            context_data_position = 0;\n            context_data.push(getCharFromInt(context_data_val));\n            context_data_val = 0;\n        } else {\n            context_data_position++;\n        }\n        value = value >> 1;\n    }\n    // Flush the last char\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        context_data_val = context_data_val << 1;\n        if (context_data_position == bitsPerChar - 1) {\n            context_data.push(getCharFromInt(context_data_val));\n            break;\n        } else context_data_position++;\n    }\n    return context_data.join(\"\");\n}\n","/*\n * SPDX-FileCopyrightText: 2013 Pieroxy <pieroxy@pieroxy.net>\n *\n * SPDX-License-Identifier: MIT\n */\n\nexport interface DecompressionTracker {\n    val: number;\n    position: number;\n    index: number;\n}\n\nexport function _decompress(length: number, resetValue: number, getNextValue: (a: number) => number): string | null {\n    const dictionary: string[] = [];\n    let enlargeIn: number = 4;\n    let dictSize: number = 4;\n    let numBits: number = 3;\n    let entry: string = \"\";\n    const result: string[] = [];\n    let i: number;\n    let w: string;\n    let bits: number;\n    let resb: number;\n    let maxpower: number;\n    let power: number;\n    let c: string | number;\n    const data: DecompressionTracker = {\n        val: getNextValue(0),\n        position: resetValue,\n        index: 1,\n    };\n\n    for (i = 0; i < 3; i += 1) {\n        dictionary[i] = String(i);\n    }\n    bits = 0;\n    maxpower = Math.pow(2, 2);\n    power = 1;\n    while (power != maxpower) {\n        resb = data.val & data.position;\n        data.position >>= 1;\n        if (data.position == 0) {\n            data.position = resetValue;\n            data.val = getNextValue(data.index++);\n        }\n        bits |= (resb > 0 ? 1 : 0) * power;\n        power <<= 1;\n    }\n    switch (bits) {\n        case 0:\n            bits = 0;\n            maxpower = Math.pow(2, 8);\n            power = 1;\n            while (power != maxpower) {\n                resb = data.val & data.position;\n                data.position >>= 1;\n                if (data.position == 0) {\n                    data.position = resetValue;\n                    data.val = getNextValue(data.index++);\n                }\n                bits |= (resb > 0 ? 1 : 0) * power;\n                power <<= 1;\n            }\n            c = String.fromCharCode(bits);\n            break;\n        case 1:\n            bits = 0;\n            maxpower = Math.pow(2, 16);\n            power = 1;\n            while (power != maxpower) {\n                resb = data.val & data.position;\n                data.position >>= 1;\n                if (data.position == 0) {\n                    data.position = resetValue;\n                    data.val = getNextValue(data.index++);\n                }\n                bits |= (resb > 0 ? 1 : 0) * power;\n                power <<= 1;\n            }\n            c = String.fromCharCode(bits);\n            break;\n        case 2:\n            return \"\";\n    }\n    if (c! === undefined) {\n        throw new Error(\"No character found\");\n    }\n    dictionary[3] = String(c);\n    w = String(c);\n    result.push(String(c));\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        if (data.index > length) {\n            return \"\";\n        }\n        bits = 0;\n        maxpower = Math.pow(2, numBits);\n        power = 1;\n        while (power != maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n                data.position = resetValue;\n                data.val = getNextValue(data.index++);\n            }\n            bits |= (resb > 0 ? 1 : 0) * power;\n            power <<= 1;\n        }\n        switch ((c = bits)) {\n            case 0:\n                bits = 0;\n                maxpower = Math.pow(2, 8);\n                power = 1;\n                while (power != maxpower) {\n                    resb = data.val & data.position;\n                    data.position >>= 1;\n                    if (data.position == 0) {\n                        data.position = resetValue;\n                        data.val = getNextValue(data.index++);\n                    }\n                    bits |= (resb > 0 ? 1 : 0) * power;\n                    power <<= 1;\n                }\n                dictionary[dictSize++] = String.fromCharCode(bits);\n                c = dictSize - 1;\n                enlargeIn--;\n                break;\n            case 1:\n                bits = 0;\n                maxpower = Math.pow(2, 16);\n                power = 1;\n                while (power != maxpower) {\n                    resb = data.val & data.position;\n                    data.position >>= 1;\n                    if (data.position == 0) {\n                        data.position = resetValue;\n                        data.val = getNextValue(data.index++);\n                    }\n                    bits |= (resb > 0 ? 1 : 0) * power;\n                    power <<= 1;\n                }\n                dictionary[dictSize++] = String.fromCharCode(bits);\n                c = dictSize - 1;\n                enlargeIn--;\n                break;\n            case 2:\n                return result.join(\"\");\n        }\n        if (enlargeIn == 0) {\n            enlargeIn = Math.pow(2, numBits);\n            numBits++;\n        }\n        if (dictionary[c]) {\n            entry = String(dictionary[c]);\n        } else {\n            if (c === dictSize) {\n                entry = w + w.charAt(0);\n            } else {\n                return null;\n            }\n        }\n        result.push(entry);\n        // Add w+entry[0] to the dictionary.\n        dictionary[dictSize++] = w + entry.charAt(0);\n        enlargeIn--;\n        w = entry;\n        if (enlargeIn == 0) {\n            enlargeIn = Math.pow(2, numBits);\n            numBits++;\n        }\n    }\n}\n","/*\n * SPDX-FileCopyrightText: 2013 Pieroxy <pieroxy@pieroxy.net>\n *\n * SPDX-License-Identifier: MIT\n */\n\nexport default \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n","/*\n * SPDX-FileCopyrightText: 2013 Pieroxy <pieroxy@pieroxy.net>\n *\n * SPDX-License-Identifier: MIT\n */\n\nimport { _compress } from \"../_compress\";\nimport keyStrBase64 from \"./keyStrBase64\";\n\nexport function compressToBase64(input: string | null): string {\n    if (input == null) {\n        return \"\";\n    }\n\n    const res = _compress(input, 6, (a) => keyStrBase64.charAt(a));\n\n    // To produce valid Base64\n    switch (res.length % 4) {\n        default: // When could this happen ?\n        case 0:\n            return res;\n        case 1:\n            return res + \"===\";\n        case 2:\n            return res + \"==\";\n        case 3:\n            return res + \"=\";\n    }\n}\n","/*\n * SPDX-FileCopyrightText: 2013 Pieroxy <pieroxy@pieroxy.net>\n *\n * SPDX-License-Identifier: MIT\n */\n\nexport type Dictionary = Record<string, number>;\nexport type DictionaryCollection = Record<string, Dictionary>;\n\nconst baseReverseDic: DictionaryCollection = {};\n\nexport function getBaseValue(alphabet: string, character: string): number {\n    if (!baseReverseDic[alphabet]) {\n        baseReverseDic[alphabet] = {};\n        for (let i = 0; i < alphabet.length; i++) {\n            baseReverseDic[alphabet][alphabet.charAt(i)] = i;\n        }\n    }\n    return baseReverseDic[alphabet][character];\n}\n","/*\n * SPDX-FileCopyrightText: 2013 Pieroxy <pieroxy@pieroxy.net>\n *\n * SPDX-License-Identifier: MIT\n */\n\nimport { _decompress } from \"../_decompress\";\nimport { getBaseValue } from \"../getBaseValue\";\nimport keyStrBase64 from \"./keyStrBase64\";\n\nexport function decompressFromBase64(input: string | null) {\n    if (input == null) return \"\";\n    if (input == \"\") return null;\n\n    return _decompress(input.length, 32, (index) => getBaseValue(keyStrBase64, input.charAt(index)));\n}\n","/*\n * SPDX-FileCopyrightText: 2013 Pieroxy <pieroxy@pieroxy.net>\n *\n * SPDX-License-Identifier: MIT\n */\n\nimport { _compress } from \"../_compress\";\n\nexport function compress(input: string | null) {\n    if (input == null) return \"\";\n\n    return _compress(input, 16, (a: number) => String.fromCharCode(a));\n}\n","/*\n * SPDX-FileCopyrightText: 2013 Pieroxy <pieroxy@pieroxy.net>\n *\n * SPDX-License-Identifier: MIT\n */\n\nimport { compress } from \"../raw/compress\";\n\nexport function compressToCustom(uncompressed: string | null, dict: string): string {\n    if (uncompressed == null) return \"\";\n\n    const compressed: string = compress(uncompressed);\n    const charsPerUnicodeChar: number = Math.ceil(Math.log(65536) / Math.log(dict.length));\n    let res: string = \"\";\n\n    for (let i = 0, TotalLen = compressed.length; i < TotalLen; i++) {\n        let current_value = compressed.charCodeAt(i);\n\n        for (let j = charsPerUnicodeChar - 1; j >= 0; j--) {\n            const selector = Math.floor(current_value / Math.pow(dict.length, j));\n            current_value = current_value % Math.pow(dict.length, j);\n            res += dict.charAt(selector);\n        }\n    }\n\n    return res;\n}\n","/*\n * SPDX-FileCopyrightText: 2013 Pieroxy <pieroxy@pieroxy.net>\n *\n * SPDX-License-Identifier: MIT\n */\n\nimport { _decompress } from \"../_decompress\";\n\nexport function decompress(compressed: string | null) {\n    if (compressed == null) return \"\";\n    if (compressed == \"\") return null;\n\n    return _decompress(compressed.length, 32768, (index) => compressed.charCodeAt(index));\n}\n","/*\n * SPDX-FileCopyrightText: 2013 Pieroxy <pieroxy@pieroxy.net>\n *\n * SPDX-License-Identifier: MIT\n */\n\nimport { decompress } from \"../raw/decompress\";\n\nexport function decompressFromCustom(compressed: string | null, dict: string): string | null {\n    if (compressed == null) return \"\";\n    if (compressed == \"\") return null;\n    if (dict.length < 2) return null;\n\n    const charsPerUnicodeChar: number = Math.ceil(Math.log(65536) / Math.log(dict.length));\n\n    if (compressed.length % charsPerUnicodeChar != 0) return null;\n\n    let res: string = \"\";\n    let current_value;\n    let index;\n\n    for (let i = 0, TotalLen = compressed.length; i < TotalLen; i = i + charsPerUnicodeChar) {\n        current_value = 0;\n\n        for (let j = 0; j < charsPerUnicodeChar; j++) {\n            index = dict.indexOf(compressed[i + j]);\n            current_value = current_value + index * Math.pow(dict.length, charsPerUnicodeChar - 1 - j);\n        }\n\n        res = res + String.fromCharCode(current_value);\n    }\n\n    return decompress(res);\n}\n","/*\n * SPDX-FileCopyrightText: 2013 Pieroxy <pieroxy@pieroxy.net>\n *\n * SPDX-License-Identifier: MIT\n */\n\nexport default \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$\";\n","/*\n * SPDX-FileCopyrightText: 2013 Pieroxy <pieroxy@pieroxy.net>\n *\n * SPDX-License-Identifier: MIT\n */\n\nimport { _compress } from \"../_compress\";\nimport keyStrUriSafe from \"./keyStrUriSafe\";\n\nexport function compressToEncodedURIComponent(input: string | null) {\n    if (input == null) return \"\";\n\n    return _compress(input, 6, (a) => keyStrUriSafe.charAt(a));\n}\n","/*\n * SPDX-FileCopyrightText: 2013 Pieroxy <pieroxy@pieroxy.net>\n *\n * SPDX-License-Identifier: MIT\n */\n\nimport { _decompress } from \"../_decompress\";\nimport { getBaseValue } from \"../getBaseValue\";\nimport keyStrUriSafe from \"./keyStrUriSafe\";\n\nexport function decompressFromEncodedURIComponent(input: string | null) {\n    if (input == null) return \"\";\n    if (input == \"\") return null;\n\n    input = input.replace(/ /g, \"+\");\n\n    return _decompress(input.length, 32, (index) => getBaseValue(keyStrUriSafe, input!.charAt(index)));\n}\n","/*\n * SPDX-FileCopyrightText: 2013 Pieroxy <pieroxy@pieroxy.net>\n *\n * SPDX-License-Identifier: MIT\n */\n\nimport { compress } from \"../raw/compress\";\n\nexport function compressToUint8Array(uncompressed: string | null): Uint8Array {\n    const compressed: string = compress(uncompressed);\n    // We cannot use convertToUint8Array as that changes the behaviour to support odd length of output!\n    const buf: Uint8Array = new Uint8Array(compressed.length * 2); // 2 bytes per character\n\n    for (let i = 0, TotalLen = compressed.length; i < TotalLen; i++) {\n        const current_value = compressed.charCodeAt(i);\n        buf[i * 2] = current_value >>> 8;\n        buf[i * 2 + 1] = current_value % 256;\n    }\n\n    return buf;\n}\n","/*\n * SPDX-FileCopyrightText: 2013 Pieroxy <pieroxy@pieroxy.net>\n *\n * SPDX-License-Identifier: MIT\n */\n\n/**\n * Converts a string to a Uint8Array, needed for saving on NodeJS, but might\n * also be useful for data transfer.\n *\n * This is binary safe rather than utf8 like TextDecoder.\n */\nexport function convertToUint8Array(data: string | null, forceEven?: boolean) {\n    if (typeof data === \"string\") {\n        // Needs a single extra digit so not an even output length\n        const isOdd = !forceEven && data.charCodeAt(data.length - 1) % 256 === 0;\n        const buf = new Uint8Array(data.length * 2 - (isOdd ? 1 : 0)); // 2 bytes per character\n\n        for (let i = 0; i < data.length; i++) {\n            const current_value = data.charCodeAt(i);\n\n            buf[i * 2] = current_value >>> 8;\n            if (!isOdd || i < data.length - 1) {\n                buf[i * 2 + 1] = current_value % 256;\n            }\n        }\n\n        return buf;\n    }\n\n    return data;\n}\n\n/**\n * Converts a Uint8Array to a string, needed for loading on NodeJS, but might\n * also be useful for data transfer.\n *\n * This is binary safe rather than utf8 like TextEncoder.\n */\nexport function convertFromUint8Array(data: Uint8Array) {\n    // There might be an odd number of digits\n    const length = Math.floor(data.byteLength / 2);\n    const arr = [];\n\n    for (let i = 0; i < length; i++) {\n        arr.push(String.fromCharCode(data[i * 2] * 256 + data[i * 2 + 1]));\n    }\n    if (data.byteLength & 1) {\n        arr.push(String.fromCharCode(data[data.byteLength - 1] * 256));\n    }\n    return arr.join(\"\");\n}\n","/*\n * SPDX-FileCopyrightText: 2013 Pieroxy <pieroxy@pieroxy.net>\n *\n * SPDX-License-Identifier: MIT\n */\n\nimport { decompress } from \"../raw/decompress\";\nimport { convertFromUint8Array } from \"./utils\";\n\nexport function decompressFromUint8Array(compressed: Uint8Array | null): string | null {\n    if (compressed === null || compressed === undefined) {\n        return decompress(compressed);\n    } else {\n        return decompress(convertFromUint8Array(compressed));\n    }\n}\n","/*\n * SPDX-FileCopyrightText: 2013 Pieroxy <pieroxy@pieroxy.net>\n *\n * SPDX-License-Identifier: MIT\n */\n\nimport { readFileSync, writeFileSync } from \"fs\";\n\nimport { convertFromUint8Array, convertToUint8Array } from \"./Uint8Array\";\n\n/**\n * Binary safe file saving for NodeJS.\n */\nexport function saveBinaryFile(fileName: string, data: string | Uint8Array) {\n    writeFileSync(fileName, typeof data === \"string\" ? convertToUint8Array(data)! : data, null);\n}\n\n/**\n * Binary safe file loading for NodeJS.\n */\nexport function loadBinaryFile(fileName: string) {\n    return convertFromUint8Array(readFileSync(fileName, null));\n}\n","/*\n * SPDX-FileCopyrightText: 2013 Pieroxy <pieroxy@pieroxy.net>\n *\n * SPDX-License-Identifier: MIT\n */\n\nimport { _compress } from \"../_compress\";\n\nexport function compressToUTF16(input: string | null) {\n    if (input == null) return \"\";\n\n    return _compress(input, 15, (a) => String.fromCharCode(a + 32)) + \" \";\n}\n","/*\n * SPDX-FileCopyrightText: 2013 Pieroxy <pieroxy@pieroxy.net>\n *\n * SPDX-License-Identifier: MIT\n */\n\nimport { _decompress } from \"../_decompress\";\n\nexport function decompressFromUTF16(compressed: string | null) {\n    if (compressed == null) return \"\";\n    if (compressed == \"\") return null;\n\n    return _decompress(compressed.length, 16384, (index) => compressed.charCodeAt(index) - 32);\n}\n","/*\n * SPDX-FileCopyrightText: 2013 Pieroxy <pieroxy@pieroxy.net>\n *\n * SPDX-License-Identifier: MIT\n */\n\nimport { _compress } from \"./_compress\";\nimport { _decompress } from \"./_decompress\";\nimport { compressToBase64, decompressFromBase64 } from \"./base64\";\nimport { compressToCustom, decompressFromCustom } from \"./custom\";\nimport { compressToEncodedURIComponent, decompressFromEncodedURIComponent } from \"./encodedURIComponent\";\nimport { loadBinaryFile, saveBinaryFile } from \"./node\";\nimport { compress, decompress } from \"./raw\";\nimport {\n    compressToUint8Array,\n    convertFromUint8Array,\n    convertToUint8Array,\n    decompressFromUint8Array,\n} from \"./Uint8Array\";\nimport { compressToUTF16, decompressFromUTF16 } from \"./UTF16\";\n\nexport default {\n    _compress,\n    _decompress,\n    compress,\n    compressToBase64,\n    compressToCustom,\n    compressToEncodedURIComponent,\n    compressToUint8Array,\n    compressToUTF16,\n    convertFromUint8Array,\n    convertToUint8Array,\n    decompress,\n    decompressFromBase64,\n    decompressFromCustom,\n    decompressFromEncodedURIComponent,\n    decompressFromUint8Array,\n    decompressFromUTF16,\n    loadBinaryFile,\n    saveBinaryFile,\n};\n"],"names":["_compress","uncompressed","bitsPerChar","getCharFromInt","i","value","context_dictionary","context_dictionaryToCreate","context_c","context_wc","context_w","context_enlargeIn","context_dictSize","context_numBits","context_data","context_data_val","context_data_position","ii","_decompress","length","resetValue","getNextValue","dictionary","enlargeIn","dictSize","numBits","entry","result","w","bits","resb","maxpower","power","c","data","keyStrBase64","compressToBase64","input","res","a","baseReverseDic","getBaseValue","alphabet","character","decompressFromBase64","index","compress","compressToCustom","dict","compressed","charsPerUnicodeChar","TotalLen","current_value","j","selector","decompress","decompressFromCustom","keyStrUriSafe","compressToEncodedURIComponent","decompressFromEncodedURIComponent","compressToUint8Array","buf","convertToUint8Array","forceEven","isOdd","convertFromUint8Array","arr","decompressFromUint8Array","saveBinaryFile","fileName","writeFileSync","loadBinaryFile","readFileSync","compressToUTF16","decompressFromUTF16"],"mappings":"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"}