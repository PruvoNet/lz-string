{"version":3,"file":"_decompress.js","sources":["../src/_decompress.ts"],"sourcesContent":["/*\n * SPDX-FileCopyrightText: 2013 Pieroxy <pieroxy@pieroxy.net>\n *\n * SPDX-License-Identifier: MIT\n */\n\nexport interface DecompressionTracker {\n    val: number;\n    position: number;\n    index: number;\n}\n\nexport function _decompress(length: number, resetValue: number, getNextValue: (a: number) => number): string | null {\n    const dictionary: string[] = [];\n    let enlargeIn: number = 4;\n    let dictSize: number = 4;\n    let numBits: number = 3;\n    let entry: string = \"\";\n    const result: string[] = [];\n    let i: number;\n    let w: string;\n    let bits: number;\n    let resb: number;\n    let maxpower: number;\n    let power: number;\n    let c: string | number;\n    const data: DecompressionTracker = {\n        val: getNextValue(0),\n        position: resetValue,\n        index: 1,\n    };\n\n    for (i = 0; i < 3; i += 1) {\n        dictionary[i] = String(i);\n    }\n    bits = 0;\n    maxpower = Math.pow(2, 2);\n    power = 1;\n    while (power != maxpower) {\n        resb = data.val & data.position;\n        data.position >>= 1;\n        if (data.position == 0) {\n            data.position = resetValue;\n            data.val = getNextValue(data.index++);\n        }\n        bits |= (resb > 0 ? 1 : 0) * power;\n        power <<= 1;\n    }\n    switch (bits) {\n        case 0:\n            bits = 0;\n            maxpower = Math.pow(2, 8);\n            power = 1;\n            while (power != maxpower) {\n                resb = data.val & data.position;\n                data.position >>= 1;\n                if (data.position == 0) {\n                    data.position = resetValue;\n                    data.val = getNextValue(data.index++);\n                }\n                bits |= (resb > 0 ? 1 : 0) * power;\n                power <<= 1;\n            }\n            c = String.fromCharCode(bits);\n            break;\n        case 1:\n            bits = 0;\n            maxpower = Math.pow(2, 16);\n            power = 1;\n            while (power != maxpower) {\n                resb = data.val & data.position;\n                data.position >>= 1;\n                if (data.position == 0) {\n                    data.position = resetValue;\n                    data.val = getNextValue(data.index++);\n                }\n                bits |= (resb > 0 ? 1 : 0) * power;\n                power <<= 1;\n            }\n            c = String.fromCharCode(bits);\n            break;\n        case 2:\n            return \"\";\n    }\n    if (c! === undefined) {\n        throw new Error(\"No character found\");\n    }\n    dictionary[3] = String(c);\n    w = String(c);\n    result.push(String(c));\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        if (data.index > length) {\n            return \"\";\n        }\n        bits = 0;\n        maxpower = Math.pow(2, numBits);\n        power = 1;\n        while (power != maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n                data.position = resetValue;\n                data.val = getNextValue(data.index++);\n            }\n            bits |= (resb > 0 ? 1 : 0) * power;\n            power <<= 1;\n        }\n        switch ((c = bits)) {\n            case 0:\n                bits = 0;\n                maxpower = Math.pow(2, 8);\n                power = 1;\n                while (power != maxpower) {\n                    resb = data.val & data.position;\n                    data.position >>= 1;\n                    if (data.position == 0) {\n                        data.position = resetValue;\n                        data.val = getNextValue(data.index++);\n                    }\n                    bits |= (resb > 0 ? 1 : 0) * power;\n                    power <<= 1;\n                }\n                dictionary[dictSize++] = String.fromCharCode(bits);\n                c = dictSize - 1;\n                enlargeIn--;\n                break;\n            case 1:\n                bits = 0;\n                maxpower = Math.pow(2, 16);\n                power = 1;\n                while (power != maxpower) {\n                    resb = data.val & data.position;\n                    data.position >>= 1;\n                    if (data.position == 0) {\n                        data.position = resetValue;\n                        data.val = getNextValue(data.index++);\n                    }\n                    bits |= (resb > 0 ? 1 : 0) * power;\n                    power <<= 1;\n                }\n                dictionary[dictSize++] = String.fromCharCode(bits);\n                c = dictSize - 1;\n                enlargeIn--;\n                break;\n            case 2:\n                return result.join(\"\");\n        }\n        if (enlargeIn == 0) {\n            enlargeIn = Math.pow(2, numBits);\n            numBits++;\n        }\n        if (dictionary[c]) {\n            entry = String(dictionary[c]);\n        } else {\n            if (c === dictSize) {\n                entry = w + w.charAt(0);\n            } else {\n                return null;\n            }\n        }\n        result.push(entry);\n        // Add w+entry[0] to the dictionary.\n        dictionary[dictSize++] = w + entry.charAt(0);\n        enlargeIn--;\n        w = entry;\n        if (enlargeIn == 0) {\n            enlargeIn = Math.pow(2, numBits);\n            numBits++;\n        }\n    }\n}\n"],"names":["_decompress","length","resetValue","getNextValue","dictionary","enlargeIn","dictSize","numBits","entry","result","i","w","bits","resb","maxpower","power","c","data"],"mappings":"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"}